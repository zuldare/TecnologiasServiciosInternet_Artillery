# =========== CONFIG
# This section contains al the configuration needed for the test, such as:
#     target, environments, phases, payloads, etc
config:
  environments:
    staging:
      target: "https://127.0.0.1:8443"

      phases:
        - duration: 40     # test duration
          arrivalRate: 5   # arrival requests rate
          # maxVusers: 8
          name: "Unique Artillery Phase for Books Application"

      http:
        pool: 8 # all users will use the same 8 connections

      ensure:
        p95: 100  # asserts 95% of requests have <100ms latency
        # Accepted error rate is 0% --> artillery automatically gives us that data when not.
        maxErrorRate: 0

      tls:
        rejectUnauthorized: false   # Authorized self-signed certs

      plugins:
        expect: {}  # Plugin needed in order to do assertions.

      payload:
        path: "books.csv"
        fields:
          - "title"
          - "description"

      variables:
        username:
          - "user"
          - "admin"
        password:
          - "pass"


# =========== SCENARIOS
# This section contains the description of the actions that users will do.

scenarios:
  ##############
  # SCENARIO 1 #
  ##############
  - name: "Scenario 1: Request the first book. A non-logged user retrieves all books and request the first to see more info"
    weight: 7 # 70%
    flow:
      - get:
          url: "/api/books/"
          capture:
            json: "$[0].id"
            as: id
          expect:
            - statusCode: 200
            - contentType: json
      - get:
          url: "/api/books/{{id}}"
          capture:
            json: "$.id"
            as: idToCheck
          expect:
            - statusCode: 200
            - contentType: json
            - equals:
              - "{{id}}"
              - "{{idToCheck}}"

  ##############
  # SCENARIO 2 #
  ##############
  - name: "Scenario 2. Book creation. A logged user creates a book and then request it in order to check it."
    weight: 2 # 20%
    flow:
      - post:
          url: "/api/books/"
          auth:
            user: "{{username}}"
            pass: "{{password}}"
          json:
            title: "{{title}}"
            description: "{{description}}"
          capture:
            json: "$.id"
            as: idBookCreated
          expect:
            - statusCode: 201
            - contentType: json

      - get:
          url: "/api/books/{{idBookCreated}}"
          capture:
            json: "$.id"
            as: idToCheck
          expect:
            - statusCode: 200
            - contentType: json
            - equals:
              - "{{idBookCreated}}"
              - "{{idToCheck}}"

  ##############
  # SCENARIO 3 #
  ##############
  - name: "Scenario 3. Book delete. An admin user creates a book and then request it in order to check it, delete it and checks that is deleted."
    weight: 1 # 10%
    flow:
      - post:
          url: "/api/books/"
          ifTrue: "username == \"admin\""
          auth:
            user: "{{username}}"
            pass: "{{password}}"
          json:
            title: "{{title}}"
            description: "{{description}}"
          capture:
            json: "$.id"
            as: idBookCreatedScenario3
          expect:
            - statusCode: 201
            - contentType: json

      - get:
          url: "/api/books/{{idBookCreatedScenario3}}"
          ifTrue: "username == \"admin\""
          capture:
            json: "$.id"
            as: idToCheckScenario3
          expect:
            - statusCode: 200
            - contentType: json
            - equals:
                - "{{idBookCreatedScenario3}}"
                - "{{idToCheckScenario3}}"

      - delete:
          url: "/api/books/{{idBookCreatedScenario3}}"
          ifTrue: "username == \"admin\""
          capture:
            json: "$.id"
            as: idToCheckScenario3
          expect:
            - statusCode: 204

      - get:
          url: "/api/books/{{idBookCreatedScenario3}}"
          ifTrue: "username == \"admin\""
          capture:
            json: "$.id"
            as: idToCheckScenario3
          expect:
            - statusCode: 404
            - contentType: json